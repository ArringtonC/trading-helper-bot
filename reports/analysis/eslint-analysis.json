[{"filePath":"/Users/arringtoncopeland/Desktop/Projects/trading-helper-bot/src/components/ImportAnalyze/DebugSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/arringtoncopeland/Desktop/Projects/trading-helper-bot/src/components/ImportAnalyze/EnhancedTradesTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/arringtoncopeland/Desktop/Projects/trading-helper-bot/src/components/ImportAnalyze/FileUploadSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/arringtoncopeland/Desktop/Projects/trading-helper-bot/src/components/ImportAnalyze/RuleEvaluationControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/arringtoncopeland/Desktop/Projects/trading-helper-bot/src/components/ImportAnalyze/SecureDragDropUpload.tsx","messages":[{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\/.","line":31,"column":11,"nodeType":"Literal","messageId":"unnecessaryEscape","endLine":31,"endColumn":12,"suggestions":[{"messageId":"removeEscape","fix":{"range":[740,741],"text":""},"desc":"Remove the `\\`. This maintains the current functionality."},{"messageId":"escapeBackslash","fix":{"range":[740,740],"text":"\\"},"desc":"Replace the `\\` with `\\\\` to include the actual backslash character."}]},{"ruleId":"no-control-regex","severity":1,"message":"Unexpected control character(s) in regular expression: \\x00, \\x1f.","line":32,"column":5,"nodeType":"Literal","messageId":"unexpected","endLine":32,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useCallback, useEffect } from 'react';\nimport { \n  CloudArrowUpIcon, \n  DocumentIcon, \n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  XMarkIcon\n} from '@heroicons/react/24/outline';\n\ninterface SecureDragDropUploadProps {\n  file: File | null;\n  parsing: boolean;\n  error: string | null;\n  onFileChange: (file: File | null) => void;\n  onParse: () => void;\n  onClear?: () => void;\n}\n\ninterface ValidationResult {\n  isValid: boolean;\n  error?: string;\n}\n\n// Security configuration\nconst SECURITY_CONFIG = {\n  maxFileSize: 10 * 1024 * 1024, // 10MB\n  allowedTypes: ['text/csv', 'text/plain', 'application/csv'],\n  allowedExtensions: ['.csv', '.txt'],\n  maxFilenameLength: 255,\n  dangerousPatterns: [\n    /[<>:\"\\/\\\\|?*]/g, // Windows invalid chars\n    /[\\x00-\\x1f\\x7f]/g, // Control characters\n    /^\\./,            // Hidden files\n    /\\.\\./,           // Directory traversal\n  ]\n};\n\nconst SecureDragDropUpload: React.FC<SecureDragDropUploadProps> = ({\n  file,\n  parsing,\n  error,\n  onFileChange,\n  onParse,\n  onClear\n}) => {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [validationError, setValidationError] = useState<string | null>(null);\n  const [uploadProgress, setUploadProgress] = useState<number | null>(null);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const progressIntervalRef = useRef<NodeJS.Timeout | null>(null);\n  const uploadTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n\n  // Cleanup intervals on unmount\n  useEffect(() => {\n    return () => {\n      if (progressIntervalRef.current) {\n        clearInterval(progressIntervalRef.current);\n      }\n      if (uploadTimeoutRef.current) {\n        clearTimeout(uploadTimeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Comprehensive file validation\n  const validateFile = useCallback((file: File): ValidationResult => {\n    // Size validation\n    if (file.size > SECURITY_CONFIG.maxFileSize) {\n      return {\n        isValid: false,\n        error: `File size (${(file.size / 1024 / 1024).toFixed(2)}MB) exceeds limit of ${SECURITY_CONFIG.maxFileSize / 1024 / 1024}MB`\n      };\n    }\n\n    // Empty file check\n    if (file.size === 0) {\n      return {\n        isValid: false,\n        error: 'File is empty'\n      };\n    }\n\n    // Filename validation\n    if (file.name.length > SECURITY_CONFIG.maxFilenameLength) {\n      return {\n        isValid: false,\n        error: 'Filename is too long'\n      };\n    }\n\n    // Check for dangerous patterns in filename\n    for (const pattern of SECURITY_CONFIG.dangerousPatterns) {\n      if (pattern.test(file.name)) {\n        return {\n          isValid: false,\n          error: 'Invalid characters in filename'\n        };\n      }\n    }\n\n    // File extension validation\n    const fileExtension = '.' + file.name.split('.').pop()?.toLowerCase();\n    if (!SECURITY_CONFIG.allowedExtensions.includes(fileExtension)) {\n      return {\n        isValid: false,\n        error: `File type not supported. Allowed: ${SECURITY_CONFIG.allowedExtensions.join(', ')}`\n      };\n    }\n\n    // MIME type validation\n    if (!SECURITY_CONFIG.allowedTypes.includes(file.type) && file.type !== '') {\n      return {\n        isValid: false,\n        error: `Invalid file type. Expected CSV or TXT file.`\n      };\n    }\n\n    return { isValid: true };\n  }, []);\n\n  // Handle file selection (both drag-drop and click)\n  const handleFileSelection = useCallback((selectedFile: File) => {\n    setValidationError(null);\n    setUploadProgress(null);\n\n    // Clear any existing intervals/timeouts\n    if (progressIntervalRef.current) {\n      clearInterval(progressIntervalRef.current);\n    }\n    if (uploadTimeoutRef.current) {\n      clearTimeout(uploadTimeoutRef.current);\n    }\n\n    const validation = validateFile(selectedFile);\n    if (!validation.isValid) {\n      setValidationError(validation.error || 'Invalid file');\n      return;\n    }\n\n    // Simulate upload progress for UX\n    setUploadProgress(0);\n    let currentProgress = 0;\n    \n    progressIntervalRef.current = setInterval(() => {\n      currentProgress += Math.random() * 15;\n      if (currentProgress >= 95) {\n        setUploadProgress(100);\n        if (progressIntervalRef.current) {\n          clearInterval(progressIntervalRef.current);\n          progressIntervalRef.current = null;\n        }\n      } else {\n        setUploadProgress(currentProgress);\n      }\n    }, 100);\n\n    // Complete the upload after a short delay\n    uploadTimeoutRef.current = setTimeout(() => {\n      if (progressIntervalRef.current) {\n        clearInterval(progressIntervalRef.current);\n        progressIntervalRef.current = null;\n      }\n      setUploadProgress(null);\n      onFileChange(selectedFile);\n      uploadTimeoutRef.current = null;\n    }, 800);\n  }, [validateFile, onFileChange]);\n\n  // Drag event handlers\n  const handleDragEnter = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    // Only set dragOver to false if we're leaving the drop zone itself\n    if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n      setIsDragOver(false);\n    }\n  }, []);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  }, []);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setIsDragOver(false);\n\n    const files = Array.from(e.dataTransfer.files);\n    if (files.length === 0) return;\n\n    if (files.length > 1) {\n      setValidationError('Please select only one file');\n      return;\n    }\n\n    handleFileSelection(files[0]);\n  }, [handleFileSelection]);\n\n  // Click handler for manual file selection\n  const handleFileInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (files && files.length > 0) {\n      handleFileSelection(files[0]);\n    }\n  }, [handleFileSelection]);\n\n  const handleClearFile = useCallback(() => {\n    // Clear any ongoing progress\n    if (progressIntervalRef.current) {\n      clearInterval(progressIntervalRef.current);\n      progressIntervalRef.current = null;\n    }\n    if (uploadTimeoutRef.current) {\n      clearTimeout(uploadTimeoutRef.current);\n      uploadTimeoutRef.current = null;\n    }\n    \n    setValidationError(null);\n    setUploadProgress(null);\n    onFileChange(null);\n    if (fileInputRef.current) {\n      fileInputRef.current.value = '';\n    }\n    if (onClear) {\n      onClear();\n    }\n  }, [onFileChange, onClear]);\n\n  const openFileDialog = useCallback(() => {\n    fileInputRef.current?.click();\n  }, []);\n\n  // Determine component state for styling\n  const hasFile = file !== null;\n  const hasError = error || validationError;\n  const isProcessing = parsing || uploadProgress !== null;\n\n  const getDropZoneClassName = () => {\n    const baseClasses = \"relative border-2 border-dashed rounded-lg p-8 text-center transition-all duration-200 cursor-pointer\";\n    \n    if (hasError) {\n      return `${baseClasses} border-red-300 bg-red-50 hover:border-red-400`;\n    }\n    \n    if (hasFile && !isProcessing) {\n      return `${baseClasses} border-green-300 bg-green-50 hover:border-green-400`;\n    }\n    \n    if (isDragOver) {\n      return `${baseClasses} border-blue-400 bg-blue-50 scale-105`;\n    }\n    \n    if (isProcessing) {\n      return `${baseClasses} border-blue-300 bg-blue-50`;\n    }\n    \n    return `${baseClasses} border-gray-300 bg-gray-50 hover:border-gray-400 hover:bg-gray-100`;\n  };\n\n  const formatFileSize = (bytes: number): string => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"w-full\">\n      {/* Hidden file input */}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        accept={SECURITY_CONFIG.allowedExtensions.join(',')}\n        onChange={handleFileInputChange}\n        className=\"hidden\"\n        aria-label=\"Upload IBKR statement file\"\n      />\n\n      {/* Drop zone */}\n      <div\n        className={getDropZoneClassName()}\n        onDragEnter={handleDragEnter}\n        onDragLeave={handleDragLeave}\n        onDragOver={handleDragOver}\n        onDrop={handleDrop}\n        onClick={openFileDialog}\n        role=\"button\"\n        tabIndex={0}\n        aria-label=\"Upload area for IBKR statement files\"\n        onKeyDown={(e) => {\n          if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            openFileDialog();\n          }\n        }}\n      >\n        {/* Progress overlay */}\n        {uploadProgress !== null && (\n          <div className=\"absolute inset-0 bg-blue-500 bg-opacity-10 rounded-lg flex items-center justify-center\">\n            <div className=\"text-center\">\n              <div className=\"w-16 h-16 mx-auto mb-2\">\n                <svg className=\"animate-spin w-16 h-16 text-blue-500\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\" className=\"opacity-25\" />\n                  <path fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\" className=\"opacity-75\" />\n                </svg>\n              </div>\n              <p className=\"text-sm font-medium text-blue-600\">\n                Uploading... {Math.round(uploadProgress)}%\n              </p>\n            </div>\n          </div>\n        )}\n\n        {/* Main content */}\n        <div className=\"space-y-4\">\n          {/* Icon */}\n          <div className=\"mx-auto w-16 h-16\">\n            {hasError ? (\n              <ExclamationTriangleIcon className=\"w-16 h-16 text-red-500\" />\n            ) : hasFile ? (\n              <CheckCircleIcon className=\"w-16 h-16 text-green-500\" />\n            ) : (\n              <CloudArrowUpIcon className=\"w-16 h-16 text-gray-400\" />\n            )}\n          </div>\n\n          {/* Text content */}\n          <div>\n            {hasFile ? (\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center justify-center space-x-2\">\n                  <DocumentIcon className=\"w-5 h-5 text-gray-500\" />\n                  <span className=\"text-sm font-medium text-gray-700 truncate max-w-xs\">\n                    {file.name}\n                  </span>\n                </div>\n                <p className=\"text-xs text-gray-500\">\n                  {formatFileSize(file.size)} • Ready to parse\n                </p>\n              </div>\n            ) : (\n              <div>\n                <h3 className=\"text-lg font-semibold text-gray-700 mb-2\">\n                  {isDragOver ? 'Drop your file here' : 'Upload IBKR Statement'}\n                </h3>\n                <p className=\"text-sm text-gray-500 mb-1\">\n                  Drag and drop your file here, or click to browse\n                </p>\n                <p className=\"text-xs text-gray-400\">\n                  Supported: CSV, TXT • Max size: {SECURITY_CONFIG.maxFileSize / 1024 / 1024}MB\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* File actions */}\n      {hasFile && !isProcessing && (\n        <div className=\"mt-4 flex flex-col sm:flex-row gap-3\">\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onParse();\n            }}\n            disabled={parsing}\n            className=\"flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200 font-medium\"\n          >\n            {parsing ? 'Parsing...' : 'Parse Statement'}\n          </button>\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              handleClearFile();\n            }}\n            className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-200 flex items-center justify-center space-x-2\"\n          >\n            <XMarkIcon className=\"w-4 h-4\" />\n            <span>Remove</span>\n          </button>\n        </div>\n      )}\n\n      {/* Error display */}\n      {hasError && (\n        <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n          <div className=\"flex items-start space-x-2\">\n            <ExclamationTriangleIcon className=\"w-5 h-5 text-red-500 flex-shrink-0 mt-0.5\" />\n            <div>\n              <h4 className=\"text-sm font-medium text-red-800\">Upload Error</h4>\n              <p className=\"text-sm text-red-700 mt-1\">\n                {validationError || error}\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Security notice */}\n      <div className=\"mt-4 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n        <div className=\"flex items-start space-x-2\">\n          <svg className=\"w-5 h-5 text-blue-500 flex-shrink-0 mt-0.5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fillRule=\"evenodd\" d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\" clipRule=\"evenodd\" />\n          </svg>\n          <div>\n            <h4 className=\"text-sm font-medium text-blue-800\">Secure Upload</h4>\n            <p className=\"text-xs text-blue-700 mt-1\">\n              Files are processed locally and not stored on our servers. Your data remains private.\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SecureDragDropUpload; \n \n \n ","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/arringtoncopeland/Desktop/Projects/trading-helper-bot/src/components/ImportAnalyze/TradesRuleTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/arringtoncopeland/Desktop/Projects/trading-helper-bot/src/components/ImportAnalyze/__tests__/SecureDragDropUpload.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'waitFor' is defined but never used.","line":2,"column":37,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport userEvent from '@testing-library/user-event';\nimport SecureDragDropUpload from '../SecureDragDropUpload';\n\n// Mock the icons from Heroicons\njest.mock('@heroicons/react/24/outline', () => ({\n  CloudArrowUpIcon: ({ className }: { className: string }) => <div data-testid=\"cloud-icon\" className={className} />,\n  DocumentIcon: ({ className }: { className: string }) => <div data-testid=\"document-icon\" className={className} />,\n  ExclamationTriangleIcon: ({ className }: { className: string }) => <div data-testid=\"error-icon\" className={className} />,\n  CheckCircleIcon: ({ className }: { className: string }) => <div data-testid=\"success-icon\" className={className} />,\n  XMarkIcon: ({ className }: { className: string }) => <div data-testid=\"x-icon\" className={className} />\n}));\n\n// Helper to create mock files\nconst createMockFile = (name: string, size: number, type: string): File => {\n  const file = new File([''], name, { type });\n  Object.defineProperty(file, 'size', { value: size });\n  return file;\n};\n\n// Helper to create drag event\nconst createDragEvent = (type: string, files: File[] = []) => {\n  const event = new Event(type, { bubbles: true }) as any;\n  event.dataTransfer = {\n    files,\n    items: files.map(file => ({ kind: 'file', type: file.type })),\n    types: ['Files']\n  };\n  return event;\n};\n\ndescribe('SecureDragDropUpload', () => {\n  const defaultProps = {\n    file: null,\n    parsing: false,\n    error: null,\n    onFileChange: jest.fn(),\n    onParse: jest.fn(),\n    onClear: jest.fn()\n  };\n\n  beforeEach(() => {\n    jest.clearAllMocks();\n    jest.clearAllTimers();\n    jest.useFakeTimers();\n  });\n\n  afterEach(() => {\n    jest.runOnlyPendingTimers();\n    jest.useRealTimers();\n  });\n\n  describe('Initial Render', () => {\n    it('renders upload zone with correct initial state', () => {\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      expect(screen.getByText('Upload IBKR Statement')).toBeInTheDocument();\n      expect(screen.getByText('Drag and drop your file here, or click to browse')).toBeInTheDocument();\n      expect(screen.getByTestId('cloud-icon')).toBeInTheDocument();\n      expect(screen.getByText(/Supported: CSV, TXT/)).toBeInTheDocument();\n    });\n\n    it('has proper accessibility attributes', () => {\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const uploadArea = screen.getByRole('button');\n      expect(uploadArea).toHaveAttribute('aria-label', 'Upload area for IBKR statement files');\n      expect(uploadArea).toHaveAttribute('tabIndex', '0');\n      \n      const fileInput = screen.getByLabelText('Upload IBKR statement file');\n      expect(fileInput).toHaveAttribute('type', 'file');\n      expect(fileInput).toHaveAttribute('accept', '.csv,.txt');\n    });\n\n    it('shows security notice', () => {\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      expect(screen.getByText('Secure Upload')).toBeInTheDocument();\n      expect(screen.getByText(/Files are processed locally/)).toBeInTheDocument();\n    });\n  });\n\n  describe('File Validation', () => {\n    it('accepts valid CSV file', async () => {\n      const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const validFile = createMockFile('statement.csv', 1024, 'text/csv');\n      const fileInput = screen.getByLabelText('Upload IBKR statement file');\n      \n      await user.upload(fileInput, validFile);\n      jest.advanceTimersByTime(1000);\n      \n      expect(defaultProps.onFileChange).toHaveBeenCalledWith(validFile);\n    });\n\n    it('accepts valid TXT file', async () => {\n      const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const validFile = createMockFile('statement.txt', 1024, 'text/plain');\n      const fileInput = screen.getByLabelText('Upload IBKR statement file');\n      \n      await user.upload(fileInput, validFile);\n      jest.advanceTimersByTime(1000);\n      \n      expect(defaultProps.onFileChange).toHaveBeenCalledWith(validFile);\n    });\n\n    it('rejects file that is too large', async () => {\n      const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const largeFile = createMockFile('large.csv', 11 * 1024 * 1024, 'text/csv'); // 11MB\n      const fileInput = screen.getByLabelText('Upload IBKR statement file');\n      \n      await user.upload(fileInput, largeFile);\n      \n      expect(screen.getByText('Upload Error')).toBeInTheDocument();\n      expect(screen.getByText(/File size.*exceeds limit/)).toBeInTheDocument();\n      expect(defaultProps.onFileChange).not.toHaveBeenCalled();\n    });\n\n    it('rejects empty file', async () => {\n      const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const emptyFile = createMockFile('empty.csv', 0, 'text/csv');\n      const fileInput = screen.getByLabelText('Upload IBKR statement file');\n      \n      await user.upload(fileInput, emptyFile);\n      \n      expect(screen.getByText('File is empty')).toBeInTheDocument();\n      expect(defaultProps.onFileChange).not.toHaveBeenCalled();\n    });\n\n    it('rejects unsupported file type', async () => {\n      const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const unsupportedFile = createMockFile('document.pdf', 1024, 'application/pdf');\n      const fileInput = screen.getByLabelText('Upload IBKR statement file');\n      \n      await user.upload(fileInput, unsupportedFile);\n      \n      expect(screen.getByText(/File type not supported/)).toBeInTheDocument();\n      expect(defaultProps.onFileChange).not.toHaveBeenCalled();\n    });\n\n    it('rejects file with dangerous filename characters', async () => {\n      const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const dangerousFile = createMockFile('file<script>.csv', 1024, 'text/csv');\n      const fileInput = screen.getByLabelText('Upload IBKR statement file');\n      \n      await user.upload(fileInput, dangerousFile);\n      \n      expect(screen.getByText('Invalid characters in filename')).toBeInTheDocument();\n      expect(defaultProps.onFileChange).not.toHaveBeenCalled();\n    });\n\n    it('rejects hidden files', async () => {\n      const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const hiddenFile = createMockFile('.hidden.csv', 1024, 'text/csv');\n      const fileInput = screen.getByLabelText('Upload IBKR statement file');\n      \n      await user.upload(fileInput, hiddenFile);\n      \n      expect(screen.getByText('Invalid characters in filename')).toBeInTheDocument();\n      expect(defaultProps.onFileChange).not.toHaveBeenCalled();\n    });\n\n    it('rejects file with directory traversal attempt', async () => {\n      const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const maliciousFile = createMockFile('../../../etc/passwd.csv', 1024, 'text/csv');\n      const fileInput = screen.getByLabelText('Upload IBKR statement file');\n      \n      await user.upload(fileInput, maliciousFile);\n      \n      expect(screen.getByText('Invalid characters in filename')).toBeInTheDocument();\n      expect(defaultProps.onFileChange).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('Drag and Drop', () => {\n    it('handles drag enter correctly', () => {\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const dropZone = screen.getByRole('button');\n      const dragEvent = createDragEvent('dragenter');\n      \n      fireEvent(dropZone, dragEvent);\n      \n      expect(screen.getByText('Drop your file here')).toBeInTheDocument();\n    });\n\n    it('handles drag leave correctly', () => {\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const dropZone = screen.getByRole('button');\n      \n      // Enter drag state\n      fireEvent(dropZone, createDragEvent('dragenter'));\n      expect(screen.getByText('Drop your file here')).toBeInTheDocument();\n      \n      // Leave drag state\n      const dragLeaveEvent = createDragEvent('dragleave');\n      Object.defineProperty(dragLeaveEvent, 'relatedTarget', { value: null });\n      fireEvent(dropZone, dragLeaveEvent);\n      \n      expect(screen.getByText('Upload IBKR Statement')).toBeInTheDocument();\n    });\n\n    it('handles valid file drop', async () => {\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const dropZone = screen.getByRole('button');\n      const validFile = createMockFile('statement.csv', 1024, 'text/csv');\n      const dropEvent = createDragEvent('drop', [validFile]);\n      \n      fireEvent(dropZone, dropEvent);\n      jest.advanceTimersByTime(1000);\n      \n      expect(defaultProps.onFileChange).toHaveBeenCalledWith(validFile);\n    });\n\n    it('handles multiple files drop (should reject)', () => {\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const dropZone = screen.getByRole('button');\n      const file1 = createMockFile('file1.csv', 1024, 'text/csv');\n      const file2 = createMockFile('file2.csv', 1024, 'text/csv');\n      const dropEvent = createDragEvent('drop', [file1, file2]);\n      \n      fireEvent(dropZone, dropEvent);\n      \n      expect(screen.getByText('Please select only one file')).toBeInTheDocument();\n      expect(defaultProps.onFileChange).not.toHaveBeenCalled();\n    });\n  });\n\n  describe('File Display and Actions', () => {\n    it('displays selected file information', () => {\n      const selectedFile = createMockFile('statement.csv', 2048, 'text/csv');\n      render(<SecureDragDropUpload {...defaultProps} file={selectedFile} />);\n      \n      expect(screen.getByText('statement.csv')).toBeInTheDocument();\n      expect(screen.getByText(/2.00 KB/)).toBeInTheDocument();\n      expect(screen.getByText('Ready to parse')).toBeInTheDocument();\n      expect(screen.getByTestId('success-icon')).toBeInTheDocument();\n      expect(screen.getByTestId('document-icon')).toBeInTheDocument();\n    });\n\n    it('shows parse and remove buttons when file is selected', () => {\n      const selectedFile = createMockFile('statement.csv', 1024, 'text/csv');\n      render(<SecureDragDropUpload {...defaultProps} file={selectedFile} />);\n      \n      expect(screen.getByText('Parse Statement')).toBeInTheDocument();\n      expect(screen.getByText('Remove')).toBeInTheDocument();\n    });\n\n    it('calls onParse when parse button is clicked', async () => {\n      const user = userEvent.setup();\n      const selectedFile = createMockFile('statement.csv', 1024, 'text/csv');\n      render(<SecureDragDropUpload {...defaultProps} file={selectedFile} />);\n      \n      const parseButton = screen.getByText('Parse Statement');\n      await user.click(parseButton);\n      \n      expect(defaultProps.onParse).toHaveBeenCalled();\n    });\n\n    it('calls onFileChange with null when remove button is clicked', async () => {\n      const user = userEvent.setup();\n      const selectedFile = createMockFile('statement.csv', 1024, 'text/csv');\n      render(<SecureDragDropUpload {...defaultProps} file={selectedFile} />);\n      \n      const removeButton = screen.getByText('Remove');\n      await user.click(removeButton);\n      \n      expect(defaultProps.onFileChange).toHaveBeenCalledWith(null);\n    });\n\n    it('disables parse button when parsing', () => {\n      const selectedFile = createMockFile('statement.csv', 1024, 'text/csv');\n      render(<SecureDragDropUpload {...defaultProps} file={selectedFile} parsing={true} />);\n      \n      const parseButton = screen.getByText('Parsing...');\n      expect(parseButton).toBeDisabled();\n    });\n  });\n\n  describe('Progress and Loading States', () => {\n    it('shows upload progress overlay', async () => {\n      const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const validFile = createMockFile('statement.csv', 1024, 'text/csv');\n      const fileInput = screen.getByLabelText('Upload IBKR statement file');\n      \n      await user.upload(fileInput, validFile);\n      \n      // Should show progress during upload simulation\n      expect(screen.getByText(/Uploading\\.\\.\\./)).toBeInTheDocument();\n      \n      // Fast forward through progress simulation\n      jest.advanceTimersByTime(1000);\n      \n      // Progress should be complete\n      expect(defaultProps.onFileChange).toHaveBeenCalledWith(validFile);\n    });\n  });\n\n  describe('Error Handling', () => {\n    it('displays external error', () => {\n      render(<SecureDragDropUpload {...defaultProps} error=\"Failed to parse file\" />);\n      \n      expect(screen.getByText('Upload Error')).toBeInTheDocument();\n      expect(screen.getByText('Failed to parse file')).toBeInTheDocument();\n      expect(screen.getByTestId('error-icon')).toBeInTheDocument();\n    });\n\n    it('clears validation error when valid file is selected', async () => {\n      const user = userEvent.setup({ advanceTimers: jest.advanceTimersByTime });\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      // First upload invalid file\n      const invalidFile = createMockFile('document.pdf', 1024, 'application/pdf');\n      const fileInput = screen.getByLabelText('Upload IBKR statement file');\n      \n      await user.upload(fileInput, invalidFile);\n      expect(screen.getByText(/File type not supported/)).toBeInTheDocument();\n      \n      // Then upload valid file\n      const validFile = createMockFile('statement.csv', 1024, 'text/csv');\n      await user.upload(fileInput, validFile);\n      jest.advanceTimersByTime(1000);\n      \n      // Error should be cleared\n      expect(screen.queryByText(/File type not supported/)).not.toBeInTheDocument();\n      expect(defaultProps.onFileChange).toHaveBeenCalledWith(validFile);\n    });\n  });\n\n  describe('Keyboard Accessibility', () => {\n    it('handles Enter key to open file dialog', async () => {\n      const user = userEvent.setup();\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const dropZone = screen.getByRole('button');\n      \n      // Focus and press Enter\n      dropZone.focus();\n      await user.keyboard('[Enter]');\n      \n      // This would normally open file dialog, but we can't test that in jsdom\n      // We can verify the dropZone received focus and key event was processed\n      expect(dropZone).toHaveFocus();\n    });\n\n    it('handles Space key to open file dialog', async () => {\n      const user = userEvent.setup();\n      render(<SecureDragDropUpload {...defaultProps} />);\n      \n      const dropZone = screen.getByRole('button');\n      \n      // Focus and press Space\n      dropZone.focus();\n      await user.keyboard('[Space]');\n      \n      expect(dropZone).toHaveFocus();\n    });\n  });\n\n  describe('File Size Formatting', () => {\n    it('formats file sizes correctly', () => {\n      const testCases = [\n        { file: createMockFile('test.csv', 0, 'text/csv'), expected: '0 Bytes' },\n        { file: createMockFile('test.csv', 1024, 'text/csv'), expected: '1.00 KB' },\n        { file: createMockFile('test.csv', 1048576, 'text/csv'), expected: '1.00 MB' },\n        { file: createMockFile('test.csv', 2560, 'text/csv'), expected: '2.50 KB' }\n      ];\n\n      testCases.forEach(({ file, expected }) => {\n        const { rerender } = render(<SecureDragDropUpload {...defaultProps} file={file} />);\n        expect(screen.getByText(new RegExp(expected))).toBeInTheDocument();\n        rerender(<SecureDragDropUpload {...defaultProps} file={null} />);\n      });\n    });\n  });\n}); \n \n \n ","usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]},{"filePath":"/Users/arringtoncopeland/Desktop/Projects/trading-helper-bot/src/pages/ImportAnalyze.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"dot-location","replacedBy":[]},{"ruleId":"new-parens","replacedBy":[]},{"ruleId":"no-mixed-operators","replacedBy":[]},{"ruleId":"no-new-object","replacedBy":["no-object-constructor"]},{"ruleId":"no-whitespace-before-property","replacedBy":[]},{"ruleId":"rest-spread-spacing","replacedBy":[]}]}]
